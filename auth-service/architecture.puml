@startuml

!includeurl https://raw.githubusercontent.com/rabelenda/cicon-plantuml-sprites/v1.0/sprites/kafka.puml

skinparam class {
    BackgroundColor<<SpringRepository>> LightGreen
    FontColor<<SpringRepository>> Black
    StereotypeFontColor Green
    StereotypeFontSize 15
    StereotypeFontStyle Italic
    BorderColor<<SpringRepository>> DarkGreen
}

rectangle "AuthenticationService" as auth {

    rectangle Infrastructure {

        database RedisAuthenticationStorage as ras {
        }

        database PostgresUserStorage as pus {
        }

        queue "<$kafka>" as kafka {
        }

        package adapter {
            package out {
                package event {
                    class KafkaProducer {
                        + void publish(DomainEvent event)
                    }

                    class Event<T> {
                        - T data
                        - Instant timestamp
                        - UUID id
                        - String eventType
                    }

                    KafkaProducer --> Event

                    note right of KafkaProducer
                        Event<T> является инфраструктурной оберткой над DomainEvent
                        и именно он публикуется в kafka
                        нужно для того, чтобы, во-первых, мы не прописывали жесткий
                        контракт event в domain, DomainEvent по сути просто маркер,
                        во-вторых, чтобы скрыть инфраструктурные детали. А так же
                        это позволяет нам использовать единый сериализатор для Event<T>,
                        при этом нам не нужно явно знать о сериализации T
                    end note
                }

                package auth {
                       class DefaultAuthenticationProvider {
                           + AuthenticationResponse authenticate(AuthenticationRequest request)
                       }
                }

                package jwt {
                   class JwtTokenProvider {
                       + String generateToken(UserId)
                       + boolean validateToken(String token)
                       + UserId extractUserId(String token)
                   }

                   class JwtRefreshTokenService {
                       + String createToken(UUID userid)
                       + boolean validateToken(String token)
                       + UUID extractUserId(String token)
                       + void invalidateToken(String token)
                   }
                }

                package persistence {
                    class JpaUserAdapter {
                        - JpaUserRepository repository
                        + User save(User user)
                        + Optional<User> findById(UUID id)
                        + Optional<User> findByEmail(String email)
                    }

                    class JpaRoleAdapter {
                        - JpaRoleRepository repository
                        + Role save(Role role)
                        + Optional<Role> getRoleByName(String name)
                    }

                    class RedisRefreshTokenAdapter {
                        - RedisRefreshTokenRepository repository
                        + RefreshToken save(RefreshToken token)
                        + Optional<RefreshToken> getRefreshTokenById(UUID id)
                        + Optional<RefreshToken> getRefreshTokenByUserId(UUID id)
                    }
                }

                package repository {
                    interface JpaUserRepository <<SpringRepository>> {}
                    interface RedisRefreshTokenRepository <<SpringRepository>> {}
                    interface JpaRoleRepository <<SpringRepository>> {}
                }

                JpaUserAdapter o-- JpaUserRepository
                JpaRoleAdapter o-- JpaRoleRepository
                RedisRefreshTokenAdapter o-- RedisRefreshTokenRepository
            }

            package in {
                package web {
                    class AuthenticationController {
                        + ResponseEntity<Void> register(RegisterRequest request)
                        + ResponseEntity<Void> login(LoginRequest request)
                        + ResponseEntity<Void> refresh()
                        + ResponseEntity<Void> logout()
                    }
                }
            }
        }
    }

    rectangle Application {
        package annotation {
            interface AuthProvider {
                AuthType value()
            }
        }

        package factory {
            class AuthenticationProviderFactory {
                - Map<AuthType, AuthenticationProvider> providers
                + getProvider(AuthType type)
            }

            note right of AuthenticationProviderFactory
                При инициализации сканирует все AuthenticationProvider,
                извлекает значение @AuthProvider(AuthType)
                и регистрирует в Map<AuthType, AuthenticationProvider>
            end note
        }

        package service {
            class AuthenticationService {
                - AuthenticationProviderFactory providerFactory
                - TokenProvider tokenProvider
                + void authenticate(AuthenticationRequest request)
                + void logout()
                + void refresh()
                + void register(RegisterRequest)
            }
        }

        package model {
            enum AuthType {
                EmailPassword
            }
        }

        package payload {
            package request {
                class RegisterRequest
                class LoginRequest
            }
        }
    }

    rectangle Domain {
        package contract {

            package event {
                interface DomainEvent {
                }
            }

            package provider {
                interface AuthenticationProvider {
                    + AuthenticationResponse authenticate(AuthenticationRequest request)
                }

                interface TokenProvider {
                    + String generateToken(UserId)
                    + boolean validateToken(String token)
                    + UserId extractUserId(String token)
                }

                note bottom of AuthenticationProvider
                    Это sealed интерфейс
                end note
            }

            package repository {
                interface UserRepository {
                    + User save(User user)
                    + Optional<User> findById(UUID id)
                    + Optional<User> findByEmail(String email)
                }

                interface RoleRepository {
                    + Role save(Role role)
                    + Optional<Role> getRoleByName(String name)
                }

                interface RefreshTokenRepository {
                    + RefreshToken save(RefreshToken token)
                    + Optional<RefreshToken> getRefreshTokenById(UUID id)
                    + Optional<RefreshToken> getRefreshTokenByUserId(UUID id)
                }
            }

            package service {
                interface RefreshTokenService {
                    + String createToken(UUID userid)
                    + boolean validateToken(String token)
                    + UUID extractUserId(String token)
                    + void invalidateToken(String token)
                }

                interface EventPublisher {
                    + void publish(DomainEvent event)
                }
            }
        }

        package payload {
            package request {
                class AuthenticationRequest
            }
        }

        package model {
            class Role
            class User
            class RefreshToken
        }

        package event {
            class UserCreationEvent
            class LoginEvent
        }
    }

    JwtTokenProvider ..|> TokenProvider
    DefaultAuthenticationProvider ..|> JpaUserAdapter
    JpaUserAdapter ..|> UserRepository
    RedisRefreshTokenAdapter ..|> RefreshTokenRepository
    JpaRoleAdapter ..|> RoleRepository
    KafkaProducer ..|> EventPublisher
    JwtRefreshTokenService ..|> RefreshTokenService
    UserCreationEvent ..|> DomainEvent
    LoginEvent ..|> DomainEvent

    AuthenticationProviderFactory o-- AuthenticationProvider
    AuthenticationProviderFactory --> AuthType

    AuthenticationController o-- AuthenticationService
    AuthenticationController --> RegisterRequest
    AuthenticationController --> LoginRequest

    AuthenticationService --> AuthenticationRequest
    AuthenticationService o-- TokenProvider
    AuthenticationService o-- RoleRepository
    AuthenticationService o-- AuthenticationProviderFactory
    AuthenticationService --> RegisterRequest

    AuthenticationProvider --> AuthenticationRequest

    DefaultAuthenticationProvider o-- JpaUserAdapter
    DefaultAuthenticationProvider ..> AuthProvider
    DefaultAuthenticationProvider --> AuthenticationRequest

    JwtRefreshTokenService o-- RedisRefreshTokenAdapter

    JpaUserAdapter --> User

    JpaRoleAdapter --> Role

    JpaRoleRepository --> pus

    JpaUserRepository --> pus

    RedisRefreshTokenRepository --> ras

    RedisRefreshTokenAdapter --> RefreshToken

    RegisterRequest --> Role

    KafkaProducer --> DomainEvent
    KafkaProducer --> kafka

    UserRepository --> User

    RoleRepository --> Role

    RefreshTokenRepository --> RefreshToken

    EventPublisher --> DomainEvent
}

@enduml